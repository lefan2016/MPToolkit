global proc string BSpiritCorrectiveShape() {

  // Select the blend shape and then the skinned mesh 

  string $Temp[] = `ls -sl`;
  global string $BlendDuplicate[];

  if (`size $Temp` == 2) {

    string $BaseModel = $Temp[1];
    string $BlendShape = $Temp[0];
    string $Skin = `findRelatedSkinCluster $BaseModel`;
    string $SkinResult;

    if ($Skin == "") {

      do {

        string $promptDialogResult = `promptDialog 
  
          -title "Missing SkinCluster"
          -message "Enter a valid skinCluster for the selected baseMesh"
          -button "Proceed" -button "Abort"
          -defaultButton "Proceed" -cancelButton "Abort"
          -dismissString "Abort"`;

        if ($promptDialogResult == "Proceed") {

          string $NewSkinCluster = `promptDialog -query -text`;
          
          if (`objExists $NewSkinCluster`) {

            string $SkinClusterSet = `listConnections -destination true ($NewSkinCluster + ".usedBy[0]")`;
            string $QueryBaseModel = `listConnections -source true ($SkinClusterSet + ".instObjGroups[0].objectGroups[0]")`;

            if ($QueryBaseModel == $BaseModel)
              $SkinResult = "Proceed";      
          }
        }

        else 
          $SkinResult = "Abort";  

      } while (($SkinResult != "Abort") && ($SkinResult != "Proceed"));
    }
    else $SkinResult = "Proceed";

    if ($SkinResult == "Proceed") {

      float $Progress = 0.0; 
      float $BaseTempOffset[] = `getAttr ($BaseModel+".translate")`;
      float $BlendTempOffset[] = `getAttr ($BlendShape+".translate")`;
      float $Offset[3];
      float $targetPosArray[];
      float $absPosArray[];
      float $relPosArray[];

      $Offset[0] = $BlendTempOffset[0] - $BaseTempOffset[0];
      $Offset[1] = $BlendTempOffset[1] - $BaseTempOffset[1];
      $Offset[2] = $BlendTempOffset[2] - $BaseTempOffset[2];

      int $vertexNameArray[];
      int $VertexCount[] = `polyEvaluate -v $BaseModel`;
      int $BlendVertexCount[] = `polyEvaluate -v $BlendShape`;

      string $ShapeNode[] = `pickWalk -d down $BaseModel`;

      if (! `connectionInfo -isDestination ($ShapeNode[0] + ".tweakLocation")`) {

        string $TweakSet[] = `listConnections -destination true ($ShapeNode[0] + ".instObjGroups[0].objectGroups[1]")`;
        string $Tweaknode[] = `listConnections -source true ($TweakSet[0] + ".usedBy[0]")`;
        connectAttr ($Tweaknode[0] + ".vlist[0].vertex[0]") ($ShapeNode[0] + ".tweakLocation");

      }

      progressWindow

        -title "BSpirit Corrective Shape"
        -progress $Progress
        -status "Calculating VertexMovements"
        -isInterruptable true
        -min 0
        -max 100;

      if ($VertexCount[0] == $BlendVertexCount[0]) {  

        for ($i = 0; $i < $VertexCount[0]; $i++) {

          if ( `progressWindow -query -isCancelled` ) break;

          $Progress = `trunc (20.0 * $i / $VertexCount[0] + 0.5)`;
          progressWindow -e -progress $Progress;

          string $vertexName = $BlendShape + ".vtx[" + $i + "]";
          float $targetPos[] = `pointPosition -w $vertexName`;

          $vertexName = $BaseModel + ".vtx[" + $i + "]"; 
          float $Pos[] = `pointPosition -w $vertexName`;
          float $relVertexPos[] = `getAttr $vertexName`;

          $targetPos[0] -= ($Pos[0]+$Offset[0]);
          $targetPos[1] -= ($Pos[1]+$Offset[1]);
          $targetPos[2] -= ($Pos[2]+$Offset[2]); 

          if (($targetPos[0]>0.001) || ($targetPos[0]<-0.001) || ($targetPos[1]>0.001) || ($targetPos[1]<-0.001) || ($targetPos[2]>0.001) || ($targetPos[2]<-0.001)) {

            int $vertexArraySize = `size $vertexNameArray`;

            $vertexNameArray[$vertexArraySize] = $i;

            $targetPosArray[($vertexArraySize * 3)] = $targetPos[0];
            $targetPosArray[($vertexArraySize * 3 + 1)] = $targetPos[1];
            $targetPosArray[($vertexArraySize * 3 + 2)] = $targetPos[2];
  
            $absPosArray[($vertexArraySize * 3)] = $Pos[0];
            $absPosArray[($vertexArraySize * 3 + 1)] = $Pos[1];
            $absPosArray[($vertexArraySize * 3 + 2)] = $Pos[2];

            $relPosArray[($vertexArraySize * 3)] = $relVertexPos[0];
            $relPosArray[($vertexArraySize * 3 + 1)] = $relVertexPos[1];
            $relPosArray[($vertexArraySize * 3 + 2)] = $relVertexPos[2];

          }
        }

        int $vertexNameArraySize = `size $vertexNameArray`;

        progressWindow -e -status "Calculating VertexMatrix";


        for ($i = 0; $i < $vertexNameArraySize; $i++) {

          if ( `progressWindow -query -isCancelled` ) break;

          $Progress = `trunc (20.0 + 60.0 * $i / $vertexNameArraySize + 0.5)`;
          progressWindow -e -progress $Progress;

          $Pos[0] = $absPosArray[($i * 3)];
          $Pos[1] = $absPosArray[($i * 3 + 1)];
          $Pos[2] = $absPosArray[($i * 3 + 2)];

          $targetPos[0] = $targetPosArray[($i * 3)];
          $targetPos[1] = $targetPosArray[($i * 3 + 1)];
          $targetPos[2] = $targetPosArray[($i * 3 + 2)];

          $vertexName = $BaseModel + ".vtx[" + $vertexNameArray[$i] + "]";

          float $return[];
          float $denominator;
          float $tempPos[];
          float $matrixEq[];

          move -r 1 0 0 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[0]  = $tempPos[0]-$Pos[0];
          $matrixEq[4]  = $tempPos[1]-$Pos[1];
          $matrixEq[8]  = $tempPos[2]-$Pos[2];
          $matrixEq[3]  = $targetPos[0];

          move -r -1 1 0 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[1]  = $tempPos[0]-$Pos[0];
          $matrixEq[5]  = $tempPos[1]-$Pos[1];
          $matrixEq[9]  = $tempPos[2]-$Pos[2];
          $matrixEq[7]  = $targetPos[1];

          move -r 0 -1 1 $vertexName;
          $tempPos = `pointPosition -w $vertexName`;
          $matrixEq[2]  = $tempPos[0]-$Pos[0];
          $matrixEq[6]  = $tempPos[1]-$Pos[1];
          $matrixEq[10] = $tempPos[2]-$Pos[2];
          $matrixEq[11] = $targetPos[2];

          $denominator = 

          ($matrixEq[0] * (($matrixEq[5]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[9]))) - 
          ($matrixEq[1] * (($matrixEq[4]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[8]))) + 
          ($matrixEq[2] * (($matrixEq[4]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[8])));

          if ($denominator != 0) { 

            $return[0] = 
 
            (
            ($matrixEq[3] * (($matrixEq[5]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[9]  ))) - 
            ($matrixEq[1] * (($matrixEq[7]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[11] ))) + 
            ($matrixEq[2] * (($matrixEq[7]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[11] )))
            ) / $denominator;

            $return[1] = 
 
            (
            ($matrixEq[0] * (($matrixEq[7]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[11] ))) -
            ($matrixEq[3] * (($matrixEq[4]*$matrixEq[10]) - ($matrixEq[6]*$matrixEq[8]  ))) + 
            ($matrixEq[2] * (($matrixEq[4]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[8]  )))
            ) / $denominator;

            $return[2] =

            (
            ($matrixEq[0] * (($matrixEq[5]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[9]  ))) - 
            ($matrixEq[1] * (($matrixEq[4]*$matrixEq[11]) - ($matrixEq[7]*$matrixEq[8]  ))) + 
            ($matrixEq[3] * (($matrixEq[4]*$matrixEq[9] ) - ($matrixEq[5]*$matrixEq[8]  )))
            ) / $denominator;

            move -r $return[0] $return[1] ($return[2]-1) $vertexName;

          }
        }
  
      if (! `progressWindow -query -isCancelled` ) {
     
          global string $BlendDuplicate[];
		  setAttr ($Skin + ".envelope" ) 0;
          string $BlendDuplicated[] = `duplicate -rc -rr $BaseModel`;
		  $BlendDuplicate[0] = $BlendDuplicated[0];
          string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};
          for ($i = 0; $i < 9; $i++) {

            setAttr -lock 0 ($BlendDuplicate[0] + $UnlockAttributes[$i]);

          }
        }
  
        progressWindow -e -st "Reseting BaseMesh";

        for ($i = 0; $i < $vertexNameArraySize; $i++) {

          $Progress = `trunc (80.0 + 20.0 * $i / $vertexNameArraySize + 0.5)`;
          progressWindow -e -progress $Progress;

          setAttr ($BaseModel+".vtx["+ $vertexNameArray[$i] +"]") $relPosArray[($i*3)] $relPosArray[($i*3+1)] $relPosArray[($i*3+2)];

        }

        setAttr ($Skin + ".envelope") 1;

      }
  
      else print "BaseMesh and BlendShape should contain the same number of vertices.\n";
      progressWindow -endProgress;
    }
  }
  else 
    print "Select the blend shape and then the skinned mesh - try again. \n";
  
  return $BlendDuplicate[0];
}


BSpiritCorrectiveShape() 